import { useCallback, useRef, useState } from "react";
import { useForm } from "react-hook-form";
import PropTypes from "prop-types";
import { CalendarIcon, Loader2, X } from "lucide-react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "../ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "../ui/form";
import { Button } from "../ui/button";
import { ErrorDisplay } from "../errorDisplay/ErrorDisplay";
import { UserComboBox } from "../comboBox/UserComboBox";
import { getDoctorsList, updateBooking } from "@/services/hospitalService";
import { toast } from "../ui/use-toast";
import errorMessage from "@/utils/errorCode";
import { SelectSlot } from "../select/SelectSlot";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { Calendar } from "../ui/calendar";
import * as zod from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const FormSchema = zod.object({
  dob: zod.date({ required_error: "Date required" }),

  doctors: zod.string().min(1, { message: "Doctor Required" }),
  slot: zod
    .string({ required_error: "Slot Required" })
    .min(1, { message: "Slot Required" }),
});
/**
 * This component is used for updating the user booking details and it is a dialog box
 * @returns user Booking Update dialog box
 */
export const UserBookingUpdate = ({ userBookingId, specialityId }) => {
  const [errorMessageDisplay, setErrorMessageDisplay] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [doctorsFullList, setDoctorsFullList] = useState([]);
  const [doctorSelect, setDoctorSelect] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const dialogClose = useRef(null);
  const calenderPopover = useRef();

  const form = useForm({
    resolver: zodResolver(FormSchema),
    defaultValues: {},
  });

  /**
   * function to call all the doctors list
   */
  const getDoctorList = useCallback(
    async (id, searchKey) => {
      try {
        const response = await getDoctorsList(
          specialityId?.specialityId,
          1,
          1,
          undefined,
          searchKey
        );
        setDoctorsFullList(response?.data?.items);
      } catch (error) {
        toast({
          variant: "destructive",
          description:
            errorMessage[error?.response?.data?.errorCode] ||
            "Uh oh! Something went wrong.",
        });
      }
    },
    [specialityId?.specialityId]
  );
  /**
   * function to close dialogbox and also clear the fields
   */
  const handleClose = () => {
    form.reset();
  };

  /**
   * function to submit the updated data
   */
  const onSubmit = async (data) => {
    const obj = {
      doctorId: doctorSelect,
      slot: data?.slot,
      date: selectedDate,
    };
    try {
      setIsLoading(true);
      await updateBooking(specialityId?.id, obj);
      setIsLoading(false);

      toast({
        variant: "success",
        title: "",
        description: "Appointment updated succefully",
      });
      dialogClose?.current?.click();
    } catch (error) {
      setIsLoading(false);
      setErrorMessageDisplay(
        errorMessage[error?.response?.data?.errorCode] ||
          errorMessage[error?.response?.data?.errorMessage]
      );
    }
  };

  /**
   * This function is used to update the calender value and close calender
   * @param {*} event is the event generated by the feild
   * @param {*} field is object from the use hook form for setting value
   */
  const handleOnSelectInCalendar = (event, field) => {
    field.onChange(event);
    calenderPopover?.current?.click();
  };

  return (
    <div>
      <Dialog onOpenChange={handleClose}>
        <DialogTrigger className="bg-primary text-primary-foreground hover:bg-primary/90 w-full h-9 px-4 rounded-sm max-w-sm">
          Edit
        </DialogTrigger>
        <DialogContent>
          <DialogPrimitive.Close
            ref={dialogClose}
            tabIndex={-1}
            onClick={handleClose}
            className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
          >
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
          <DialogHeader>
            <DialogTitle className="mb-4">Edit Booking</DialogTitle>
            <DialogDescription asChild>
              <Form {...form}>
                <form
                  onSubmit={form.handleSubmit(onSubmit)}
                  className="w-full space-y-1"
                >
                  <FormField
                    control={form.control}
                    name="doctors"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex">Doctor Name</FormLabel>
                        <FormControl>
                          <UserComboBox
                            detailList={doctorsFullList}
                            field={field}
                            form={form}
                            type="doctors"
                            disabledOrNot={false}
                            getDetails={getDoctorList}
                            setDoctorSelect={setDoctorSelect}
                            userBookingId={userBookingId}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="dob"
                    render={({ field }) => (
                      <FormItem className="flex flex-col sm:mt-2">
                        <FormLabel>Booking date</FormLabel>
                        <FormControl>
                          <Popover>
                            <PopoverTrigger asChild ref={calenderPopover}>
                              <Button
                                variant={"outline"}
                                className={cn(
                                  "pl-3 text-left font-normal",
                                  !field.value && "text-muted-foreground"
                                )}
                              >
                                {field.value ? (
                                  format(field.value, "PPP")
                                ) : (
                                  <span>Pick a date</span>
                                )}
                                <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent
                              className="w-auto p-0"
                              align="start"
                            >
                              <Calendar
                                mode="single"
                                selected={field.value}
                                onSelect={(event) => {
                                  handleOnSelectInCalendar(event, field);
                                  const year = event.toLocaleString("default", {
                                    year: "numeric",
                                  });
                                  const month = event.toLocaleString(
                                    "default",
                                    {
                                      month: "2-digit",
                                    }
                                  );
                                  const day = event.toLocaleString("default", {
                                    day: "2-digit",
                                  });
                                  const formattedDate =
                                    year + "-" + month + "-" + day;
                                  setSelectedDate(formattedDate);
                                }}
                                required
                                disabled={(date) =>
                                  date < new Date().setHours(0, 0, 0, 0)
                                }
                                captionLayout="dropdown-buttons"
                                fromYear={1900}
                                toYear={new Date().getFullYear()}
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="slot"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex">Slot</FormLabel>
                        <FormControl>
                          <SelectSlot
                            field={field}
                            doctorId={doctorSelect}
                            date={selectedDate}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <Button disabled={isLoading} type="submit" className="w-full">
                    {isLoading && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Submit
                  </Button>
                  <ErrorDisplay message={errorMessageDisplay} />
                </form>
              </Form>
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>
    </div>
  );
};

UserBookingUpdate.propTypes = {
  specialityId: PropTypes.shape({
    id: PropTypes.any,
    specialityId: PropTypes.any,
  }),
  userBookingId: PropTypes.any,
};
