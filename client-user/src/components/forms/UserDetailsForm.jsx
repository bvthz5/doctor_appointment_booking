import { useEffect, useRef, useState } from "react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "../ui/form";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { ErrorDisplay } from "../errorDisplay/ErrorDisplay";
import errorMessage from "@/utils/errorCode";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { CalendarIcon, Loader2 } from "lucide-react";
import { addUserDetails } from "@/services/hospitalService";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import PropTypes from "prop-types";
import { ROUTES_NAME } from "@/utils/routeName";
import { useNavigate } from "react-router-dom";

const alphaNumbericRegrex = /^[A-Za-z0-9]+$/;

/**
 * validation of user details
 */
const FormSchema = z.object({
  firstName: z
    .string({ message: "First Name is required" })
    .trim()
    .min(1, { message: "First Name is required" })
    .max(50, { message: "First Name can only contain at most 50 character(s)" })
    .refine(
      (value) => alphaNumbericRegrex.test(value),
      "First Name must contain only alphabet,numbers"
    ),
  lastName: z
    .string({ message: "Last Name is required" })
    .trim()
    .min(1, { message: "Last Name is required" })
    .max(50, { message: "Last Name can only contain at most 50 character(s)" })
    .refine(
      (value) => alphaNumbericRegrex.test(value),
      "Last Name must contain only alphabet,numbers"
    ),
  dob: z
    .date()
    .min(new Date("1900-01-01"), { message: "Too old" })
    .max(new Date(), { message: "Too young!" }),
  gender: z
    .string({
      required_error: "Gender required",
    })
    .min(1, { message: "Gender required" }),

  mobileNo: z
    .string({ message: "Phone number is required" })
    .trim()
    .length(10, { message: "Phone number must be 10 character(s)" })
    .refine(
      (value) => /^(?!.*\.$)\d+(\.\d*)?$/.test(value),
      "Mobile number must be a number"
    ),
});

/**
 * It is used to get the details of the user and save it.
 * params {*} userdetails if already exist
 * @returns return the user details form component.
 */
export const UserDetailsForm = ({ userDetails }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessageDisplay, setErrorMessageDisplay] = useState("");
  const calenderPopover = useRef();
  const navigate = useNavigate();
  const form = useForm({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      dob: "",
      gender: userDetails?.gender?.toLowerCase() || undefined,
      mobileNo: "",
    },
  });

  /**
   * to set the userdetails if there any exist
   */
  useEffect(() => {
    form.setValue("firstName", userDetails?.firstName);
    form.setValue("lastName", userDetails?.lastName);
    form.setValue("mobileNo", userDetails?.mobileNo);
    userDetails?.dob && form.setValue("dob", new Date(userDetails?.dob));
  }, [form, userDetails]);
  /**
   * to clear the error message displayed in error component when getting error from api ,when user change value in form
   */
  useEffect(() => {
    const subscription = form.watch(() => {
      setErrorMessageDisplay("");
    });
    return () => subscription.unsubscribe();
  }, [form, form.watch]);
  /**
   * used to submit user details to server
   * @param {object} it is a object with data of user
   */
  const onSubmit = async (data) => {
    try {
      setIsLoading(true);
      const year = data?.dob.toLocaleString("default", { year: "numeric" });
      const month = data?.dob.toLocaleString("default", { month: "2-digit" });
      const day = data?.dob.toLocaleString("default", { day: "2-digit" });
      const formattedDate = year + "-" + month + "-" + day;
      data.dob = formattedDate;
      await addUserDetails(data);
      localStorage.updateFlag = "0";
      setIsLoading(false);
      navigate(ROUTES_NAME?.bookAppointment);
    } catch (error) {
      setErrorMessageDisplay(
        errorMessage[error?.response?.data?.errorCode] ||
          "Uh oh! Something went wrong."
      );
      setIsLoading(false);
    }
  };
  /**
   * This function is used to update the calender value and close calender
   * @param {*} event is the event generated by the feild
   * @param {*} field is object from the use hook form for setting value
   */
  const handleOnSelectInCalendar = (event, field) => {
    field.onChange(event);
    calenderPopover?.current?.click();
  };

  return (
    <div className="grid place-content-center">
      <div className="mt-10">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-1">
            <div className="sm:w-[30vw]">
              <ErrorDisplay message={errorMessageDisplay} />
            </div>

            <div className="flex flex-col sm:gap-3">
              <div className="w-[80vw] md:w-[50vw]">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name</FormLabel>
                      <FormControl>
                        <Input placeholder="john" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name</FormLabel>
                      <FormControl>
                        <Input placeholder="vinson" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="dob"
                  render={({ field }) => (
                    <FormItem className="flex flex-col sm:mt-2">
                      <FormLabel>Date of birth</FormLabel>
                      <FormControl>
                        <Popover>
                          <PopoverTrigger asChild ref={calenderPopover}>
                            <Button
                              variant={"outline"}
                              className={cn(
                                "pl-3 text-left font-normal",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={field.value}
                              onSelect={(event) =>
                                handleOnSelectInCalendar(event, field)
                              }
                              required
                              disabled={(date) => date > new Date()}
                              captionLayout="dropdown-buttons"
                              fromYear={1900}
                              toYear={new Date().getFullYear()}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="w-[80vw] md:w-[50vw]">
                <FormField
                  control={form.control}
                  name="gender"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Gender</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a gender" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="male">Male</SelectItem>
                          <SelectItem value="female">Female</SelectItem>
                          <SelectItem value="other">others</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="mobileNo"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Mobile No</FormLabel>
                      <FormControl>
                        <Input placeholder="9876543210" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button
                  disabled={isLoading}
                  type="submit"
                  className="w-full md:w-[50vw] sm:mt-7"
                >
                  {isLoading && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Next
                </Button>
              </div>
            </div>
          </form>
        </Form>
      </div>
    </div>
  );
};
UserDetailsForm.propTypes = {
  setUserDetailsUpdateFlag: PropTypes.any,
  userDetails: PropTypes.any,
};
